import {
  idToXY,
  segToID,
  pathsToGraph,
  generateFillPath,
} from "../hamiltonian.mjs";
import { assertEq, buildPaths } from "./utils.mjs";

export function run() {
  testPathsToGraph();
  testGenerateFillPath();

  assertEq(segToID({ point: { x: 1, y: 2 } }), "1,2");
  assertEq(idToXY("1,2"), [1, 2]);
}

function testPathsToGraph() {
  const twoRectangles = [
    new paper.Path.Rectangle(new paper.Point(0, 0), new paper.Point(10, 5)),
    new paper.Path.Rectangle(new paper.Point(0, 5), new paper.Point(10, 10)),
  ];

  let graph = pathsToGraph(twoRectangles);
  assertEq(Object.keys(graph["0,0"]), ["0,5", "10,0"]);
  assertEq(Object.keys(graph["10,10"]), ["10,5", "0,10"]);
  assertEq(Object.keys(graph).length, 6);

  // circle segmented with rectangles
  let pathData = [
    "M151.29142,13.20577c24.20592,0 46.75127,3.67336 65.66176,10l-131.32351,0c18.91048,-6.32664 41.45584,-10 65.66175,-10c0,0 0,0 0,0z",
    "M62.59602,33.20577c6.83141,-3.80403 14.56833,-7.16786 23.03365,-10l131.32351,0c8.46532,2.83214 16.20224,6.19597 23.03365,10z",
    "M47.94475,43.20577c4.23471,-3.587 9.1493,-6.93627 14.65127,-10h177.39081c5.50196,3.06373 10.41656,6.413 14.65127,10z",
    "M38.39977,53.20577c2.61192,-3.49602 5.81466,-6.84024 9.54498,-10l206.69334,0c3.73032,3.15976 6.93306,6.50398 9.54498,10z",
    "M32.74387,63.20577c1.35335,-3.44467 3.25503,-6.78646 5.65591,-10l225.7833,0c2.40088,3.21354 4.30255,6.55533 5.65591,10z",
    "M30.41906,73.20577c0.25969,-3.41065 1.04836,-6.75108 2.32481,-10l237.09511,0c1.27645,3.24892 2.06512,6.58935 2.32481,10z",
    "M30.32404,75.70589c0,-0.83732 0.03187,-1.6708 0.09501,-2.50012h241.74473c0.06315,0.82932 0.09501,1.6628 0.09501,2.50012c0,2.53814 -0.29283,5.04094 -0.86198,7.49988l-240.21079,0c-0.56915,-2.45894 -0.86198,-4.96174 -0.86198,-7.49988z",
    "M271.39682,83.20577c-0.79304,3.42618 -2.12254,6.7672 -3.94387,10l-232.32304,0c-1.82133,-3.2328 -3.15084,-6.57382 -3.94387,-10z",
    "M267.45294,93.20577c-1.95346,3.46731 -4.47269,6.81013 -7.50262,10l-217.31781,0c-3.02993,-3.18987 -5.54916,-6.53269 -7.50262,-10z",
    "M259.95033,103.20577c-3.35677,3.53396 -7.34036,6.8802 -11.87587,10l-193.56607,0c-4.53551,-3.1198 -8.5191,-6.46604 -11.87587,-10z",
    "M248.07446,113.20577c-5.3312,3.66713 -11.42495,7.02141 -18.15963,10l-157.24682,0c-6.73468,-2.97859 -12.82843,-6.33287 -18.15963,-10z",
    "M229.91483,123.20577c-9.26946,4.09967 -19.7531,7.48762 -31.13376,10l-94.97929,0c-11.38066,-2.51238 -21.8643,-5.90033 -31.13376,-10z",
    "M151.29142,138.20601c-16.85755,0 -32.90972,-1.78159 -47.48965,-5.00024l94.97929,0c-14.57993,3.21864 -30.6321,5.00024 -47.48965,5.00024z",
  ];
  let paths = buildPaths(pathData);
  graph = pathsToGraph(paths);
  assertEq(Object.keys(graph).length, 28);
}

export function testGenerateFillPath() {
  const graph = {
    "0,0": { "1,1": 1 },
    "1,1": { "0,0": 1 },
  };
  let path = generateFillPath("1,1", graph);
  assertEq(path, ["1,1", "0,0"]);

  path = generateFillPath("0,0", graph);
  assertEq(path, ["0,0", "1,1"]);

  const threePtGraph = {
    "0,0": { "1,0": 1, "0,1": 1 },
    "1,0": { "0,0": 1, "0,1": 1 },
    "0,1": { "0,0": 1, "1,0": 1 },
  };
  path = generateFillPath("0,0", threePtGraph);
  assertEq(path, ["0,0", "1,0", "0,1"]);
}
